{"version":3,"sources":["ducks/memorizations/actions.js","components/Checkbox/index.js","components/MemoLine/index.js","helpers/id.js","constants/localStorage.js","ducks/memorizations/data.js","ducks/memorizations/reducer.js","hooks/localStorage.js","components/ActionBar/index.js","components/Header/index.js","containers/App/index.js","serviceWorker.js","index.js"],"names":["COMPLETE_MEMO_CYCLE","REMOVE_MEMO_CYCLE","CHANGE_MEMO_TITLE","ADD_MEMO","DELETE_MEMO","Checkbox","_ref","value","onChange","index","react_default","a","createElement","onClick","className","undefined","MemoLine","dispatch","title","memorization","id","handleMemoRepeatChange","i","length","type","completeMemoCycle","removeMemoCycle","e","changeMemoTitle","target","placeholder","aria-label","deleteMemo","map","repeat","components_Checkbox","key","generateId","concat","Math","random","toString","substr","LS_MEMO_KEY","data","generateEmptyMemo","initMemorization","item","window","localStorage","getItem","JSON","parse","initialValue","error","console","log","persistReducer","state","action","currentState","memo","Object","objectSpread","toConsumableArray","m","filter","Error","reducer","setItem","stringify","useLocalStorage","_useState","useState","_useState2","slicedToArray","storedValue","setStoredValue","valueToStore","Function","ActionBar","onThemeChange","onDirectionChange","Header","_useLocalStorage","_useLocalStorage2","header","setHeader","inputRef","useRef","useEffect","current","focus","ref","App","_useMemorizationReduc","useReducer","_useMemorizationReduc2","memorizationDispatcher","dark","setDarkMode","_useLocalStorage3","_useLocalStorage4","rtl","setRTLMode","cx","components_Header","memoLine","components_MemoLine","components_ActionBar","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","ReactDOM","render","containers_App","document","getElementById","URL","process","href","origin","addEventListener","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.a152cbbd.chunk.js","sourcesContent":["\nexport const COMPLETE_MEMO_CYCLE = '@memoz/COMPLETE_MEMO_CYCLE';\nexport const REMOVE_MEMO_CYCLE = '@memoz/REMOVE_MEMO_CYCLE';\nexport const CHANGE_MEMO_TITLE = '@memoz/CHANGE_MEMO_TITLE';\nexport const ADD_MEMO = '@memoz/ADD_MEMO';\nexport const DELETE_MEMO = '@memoz/DELETE_MEMO';\n\nexport const completeMemoCycle = id => ({ type: COMPLETE_MEMO_CYCLE, id });\nexport const removeMemoCycle = id => ({ type: REMOVE_MEMO_CYCLE, id });\nexport const addMemo = () => ({ type: ADD_MEMO });\nexport const deleteMemo = id => ({ type: DELETE_MEMO, id });\nexport const changeMemoTitle = (id, value) => ({ type: CHANGE_MEMO_TITLE, id, value });\n","import React from 'react';\n\nimport './Checkbox.css';\n\nconst Checkbox = ({ value, onChange, index }) => {\n  const handleCheckboxClick = () => {\n    onChange(!value);\n  };\n\n  return (\n    <div onClick={handleCheckboxClick} className=\"Checkbox\">\n      {value ? (\n        <span className=\"Checkbox_active\">{index !== undefined ? index + 1 : null}</span>\n      ) : null}\n    </div>\n  );\n};\n\nexport default Checkbox;\n","import React from 'react';\n\nimport './MemoLine.css';\nimport {\n  removeMemoCycle,\n  completeMemoCycle,\n  changeMemoTitle,\n  deleteMemo,\n} from '../../ducks/memorizations/actions';\nimport Checkbox from '../Checkbox';\n\nconst MemoLine = ({\n  dispatch, title, memorization, id,\n}) => {\n  const handleMemoTitleChange = (e) => {\n    dispatch(changeMemoTitle(id, e.target.value));\n  };\n\n  const handleMemoRepeatChange = (i, value) => {\n    if (!title) {\n      return;\n    }\n\n    if (i === memorization.length - 1) {\n      dispatch(completeMemoCycle(id));\n    }\n\n    if (i === memorization.length - 2) {\n      if (!value) {\n        dispatch(removeMemoCycle(id));\n      }\n    }\n  };\n\n  const handleDeleteMemo = () => {\n    dispatch(deleteMemo(id));\n  };\n\n  return (\n    <div className=\"MemoLine\">\n      <div className=\"MemoLine_input_container\">\n        <input\n          className=\"MemoLine_input\"\n          onChange={handleMemoTitleChange}\n          placeholder=\"Memo item\"\n          value={title}\n          aria-label=\"Memo item title\"\n          type=\"text\"\n        />\n        <span onClick={handleDeleteMemo} className=\"MemoLine_delete\">Delete</span>\n      </div>\n\n      <div className=\"MemoLine_RepeatList\">\n        {memorization.map((repeat, i) => (\n          <Checkbox\n            onChange={value => handleMemoRepeatChange(i, value)}\n            value={repeat}\n            index={i}\n            key={i}\n          />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default MemoLine;\n","// Math.random should be unique because of its seeding algorithm.\n// Convert it to base 36 (numbers + letters), and grab the first 9 characters\n// after the decimal.\nexport const generateId = () => `_memoz${Math.random()\n  .toString(36)\n  .substr(2, 9)}`;\n","export const LS_DARK_MODE = 'dark';\nexport const LS_RTL_MODE = 'rtl';\nexport const LS_HEADER = 'h';\nexport const LS_MEMO_KEY = 'memorization';\n","import { generateId } from '../../helpers/id';\n\nexport default [\n  {\n    id: generateId(),\n    title: 'C Major',\n    memorization: [true, true, true, false],\n  },\n  {\n    id: generateId(),\n    title: 'G Major',\n    memorization: [true, true, false],\n  },\n  {\n    id: generateId(),\n    title: 'D Major',\n    memorization: [true, true, true, true, false],\n  },\n  {\n    id: generateId(),\n    title: 'A Major',\n    memorization: [true, false],\n  },\n  {\n    id: generateId(),\n    title: 'E Major',\n    memorization: [true, true, true, true, true, true, true, true, true, false],\n  },\n  {\n    id: generateId(),\n    title: 'A Minor',\n    memorization: [true, true, true, true, true, true, true, false],\n  },\n  {\n    id: generateId(),\n    title: 'D Minor',\n    memorization: [true, true, true, true, false],\n  },\n  {\n    id: generateId(),\n    title: 'G Minor',\n    memorization: [true, true, true, true, true, true, true, true, true, true, true, true, false],\n  },\n];\n","import { useReducer } from 'react';\nimport { generateId } from '../../helpers/id';\nimport {\n  COMPLETE_MEMO_CYCLE,\n  REMOVE_MEMO_CYCLE,\n  CHANGE_MEMO_TITLE,\n  ADD_MEMO,\n  DELETE_MEMO,\n} from './actions';\nimport { LS_MEMO_KEY } from '../../constants/localStorage';\nimport initialValue from './data';\n\nconst generateEmptyMemo = () => ({\n  id: generateId(),\n  title: '',\n  memorization: [],\n});\n\nfunction initMemorization() {\n  try {\n    const item = window.localStorage.getItem(LS_MEMO_KEY);\n    return item ? JSON.parse(item) : initialValue;\n  } catch (error) {\n    console.log(error);\n    return initialValue;\n  }\n}\n\nfunction reducer(state, action) {\n  switch (action.type) {\n    case COMPLETE_MEMO_CYCLE:\n      return state.map((memo) => {\n        if (memo.id !== action.id) {\n          return memo;\n        }\n\n        return {\n          ...memo,\n          memorization: [\n            ...memo.memorization.map(\n              (m, i, memorization) => (i === memorization.length - 1 ? true : m),\n            ),\n            false,\n          ],\n        };\n      });\n    case REMOVE_MEMO_CYCLE:\n      return state.map((memo) => {\n        if (memo.id !== action.id) {\n          return memo;\n        }\n\n        return {\n          ...memo,\n          memorization: memo.memorization\n            .filter((m, i, memorization) => i !== memorization.length - 1)\n            .map((m, i, a) => (i === a.length - 1 ? false : m)),\n        };\n      });\n    case CHANGE_MEMO_TITLE:\n      return state.map((memo) => {\n        if (memo.id !== action.id) {\n          return memo;\n        }\n\n        let { memorization } = memo;\n\n        if (!memo.title && action.value && !memorization.length) {\n          memorization = [false];\n        }\n\n        return {\n          ...memo,\n          memorization,\n          title: action.value,\n        };\n      });\n    case ADD_MEMO:\n      return [...state, generateEmptyMemo()];\n    case DELETE_MEMO:\n      if (state.length > 1) {\n        return state.filter(memo => memo.id !== action.id);\n      }\n\n      return [generateEmptyMemo()];\n\n    default:\n      throw new Error();\n  }\n}\n\nconst persistReducer = (state, action) => {\n  const currentState = reducer(state, action);\n\n  try {\n    // Save to local storage\n    window.localStorage.setItem(LS_MEMO_KEY, JSON.stringify(currentState));\n  } catch (error) {\n    // A more advanced implementation would handle the error case\n    console.log(error);\n  }\n\n  return currentState;\n};\n\nexport default () => useReducer(persistReducer, [], initMemorization);\n","import { useState } from 'react';\n\n// Hook\nfunction useLocalStorage(key, initialValue) {\n  // State to store our value\n  // Pass initial state function to useState so logic is only executed once\n  const [storedValue, setStoredValue] = useState(() => {\n    try {\n      // Get from local storage by key\n      const item = window.localStorage.getItem(key);\n      // Parse stored json or if none return initialValue\n      return item ? JSON.parse(item) : initialValue;\n    } catch (error) {\n      // If error also return initialValue\n      console.log(error);\n      return initialValue;\n    }\n  });\n\n  // Return a wrapped version of useState's setter function that ...\n  // ... persists the new value to localStorage.\n  const setValue = (value) => {\n    try {\n      // Allow value to be a function so we have same API as useState\n      const valueToStore = value instanceof Function ? value(storedValue) : value;\n      // Save state\n      setStoredValue(valueToStore);\n      // Save to local storage\n      window.localStorage.setItem(key, JSON.stringify(valueToStore));\n    } catch (error) {\n      // A more advanced implementation would handle the error case\n      console.log(error);\n    }\n  };\n\n  return [storedValue, setValue];\n}\n\nexport default useLocalStorage;\n","import React from 'react';\nimport './ActionBar.css';\n\nconst ActionBar = ({ onThemeChange, onDirectionChange }) => (\n  <div className=\"ActionBar\">\n    <button onClick={onThemeChange} className=\"ActionBar_btn\">\n      <i className=\"material-icons\">\n        highlight\n      </i>\n    </button>\n    <button onClick={onDirectionChange} className=\"ActionBar_btn\">\n      <i className=\"material-icons\">\n      swap_horiz\n      </i>\n    </button>\n  </div>\n);\n\nexport default ActionBar;\n","import React, { useRef, useEffect } from 'react';\nimport useLocalStorage from '../../hooks/localStorage';\nimport { LS_HEADER } from '../../constants/localStorage';\n\nimport './Header.css';\n\nconst Header = () => {\n  const [header, setHeader] = useLocalStorage(LS_HEADER, 'Scales Memorization');\n  const inputRef = useRef();\n\n  useEffect(() => {\n    inputRef.current.focus();\n  }, [inputRef]);\n\n\n  return (\n    <header className=\"Header\">\n      <input\n        ref={inputRef}\n        value={header}\n        onChange={e => setHeader(e.target.value)}\n        className=\"Header_input\"\n        type=\"text\"\n        aria-label=\"Title\"\n      />\n    </header>\n  );\n};\n\nexport default Header;\n","import React from 'react';\nimport cx from 'classnames';\nimport MemoLine from '../../components/MemoLine';\nimport useMemorizationReducer from '../../ducks/memorizations/reducer';\nimport useLocalStorage from '../../hooks/localStorage';\nimport './App.css';\nimport { addMemo } from '../../ducks/memorizations/actions';\nimport ActionBar from '../../components/ActionBar';\nimport { LS_DARK_MODE, LS_RTL_MODE } from '../../constants/localStorage';\nimport Header from '../../components/Header';\n\nconst App = () => {\n  const [state, memorizationDispatcher] = useMemorizationReducer();\n  const [dark, setDarkMode] = useLocalStorage(LS_DARK_MODE, false);\n  const [rtl, setRTLMode] = useLocalStorage(LS_RTL_MODE, false);\n\n  const handleAddItemClick = () => {\n    memorizationDispatcher(addMemo());\n  };\n\n  const handleThemeChange = () => {\n    setDarkMode(!dark);\n  };\n\n  const handleRTLChange = () => {\n    setRTLMode(!rtl);\n  };\n\n  return (\n    <div className={cx('App', { dark, rtl })}>\n      <Header />\n      <div>\n        {state.map(memoLine => (\n          <MemoLine\n            key={memoLine.id}\n            id={memoLine.id}\n            title={memoLine.title}\n            memorization={memoLine.memorization}\n            dispatch={memorizationDispatcher}\n          />\n        ))}\n      </div>\n      <button className=\"App_add_btn\" type=\"button\" onClick={handleAddItemClick}>\n        <span>Add item</span>\n      </button>\n\n      <ActionBar\n        onDirectionChange={handleRTLChange}\n        onThemeChange={handleThemeChange}\n      />\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}